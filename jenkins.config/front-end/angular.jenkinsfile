@Library(['jenkinslib']) _

pipeline {
    agent any

    environment {
        DOCKER_TAG = "${BUILD_NUMBER}"
        ImageName = "radomkhoem/angular:${DOCKER_TAG}"
        GitRepoURL = "https://github.com/roldophe/my-angular-project.git"
        ContainerName = "angular_cont1.1"
        PortMapping = "80"
        HostPort = "3002"
    }

    stages {
        stage('Git clone') {
            steps {
                echo "Cloning repository from GitHub"
                git branch: 'main', url: env.GitRepoURL
                sh 'ls -lrt'
                sh 'pwd'
            }
        }

        stage('Remove Existing Images') {
            steps {
                echo "Removing existing Docker image."
                sh "docker rmi -f ${ImageName} || true"
            }
        }

        stage('Write Docker file to git Repo') {
            steps {
                script {
                    echo "Building Docker image with tag: ${DOCKER_TAG}"
                    angularWithDocker(DOCKER_TAG, ImageName)
                }
            }
        }

        stage('Push images') {
            steps {
                echo "Pushing Docker image to DockerHub."
                withCredentials([usernamePassword(credentialsId: 'docker-hub', usernameVariable: 'USER', passwordVariable: 'PASS')]) {
                    sh 'docker login -u $USER -p $PASS'
                    sh "docker push ${ImageName}"
                    sh 'docker logout'
                }
            }
        }

       

        stage('Deploy') {
            steps {
                echo "Deploying Docker container."
                sh "docker stop ${ContainerName} || true"
                sh "docker rm ${ContainerName} || true"
                sh "docker run -d -p ${HostPort}:${PortMapping} --name ${env.ContainerName} ${ImageName}"
            }
        }

        stage('Clean Up Docker Images') {
            steps {
                echo "Removing dangling Docker images."
                sh 'docker rmi $(docker images -f "dangling=true" -q) || true'
            }
        }

        stage('Clean workspace') {
            steps {
                cleanWs()
            }
        }
    }
}
