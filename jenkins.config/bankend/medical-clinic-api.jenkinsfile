pipeline {
    agent any

    environment {
        chat_id = '1053418999'
        REGISTRY = 'radomkhoem'
        IMAGE = 'medical-clinic'
        TAG = "${BUILD_NUMBER}"
        CREDENTIALS_ID = 'docker-hub'
        GitRepoURL = "https://github.com/roldophe/medical-clinic.git"
        CONTAINER_NAME = "${IMAGE}-${TAG}"
        CONTAINER_PORT = "8080"
        HOST_PORT = "8082"
    }

    stages {
        stage('Clean workspace') {
            steps {
                cleanWs()
                sendMessageToTelegram("Clean workspace successfully")
            }
        }
        // stage('Git clone') {
        //     steps {
        //         echo "Cloning repository from GitHub"
        //         git branch: 'main', url: env.GitRepoURL
        //         sh 'ls -lrt'
        //         sh 'pwd'
        //         sendMessageToTelegram("Git clone stage completed")
        //     }
        // }
        stage('Check and Remove Running Container') {
            steps {
                script {
                    // Check if a container is running on the HOST_PORT and stop/remove it if exists
                    def runningContainerId = sh(script: "docker ps -q --filter 'publish=${HOST_PORT}'", returnStdout: true).trim()

                    if (runningContainerId) {
                        echo "Stopping and removing the existing container with ID: ${runningContainerId}."
                        sh "docker stop ${runningContainerId}"
                        sh "docker rm ${runningContainerId}"
                    } else {
                        echo "No container is running on port ${HOST_PORT}."
                    }

                    sendMessageToTelegram("Checked and removed running container on port ${HOST_PORT}")
                }
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    try {
                        apiBuildAndPushDocker(
                            image: env.IMAGE,
                            registry: env.REGISTRY,
                            tag: env.TAG,
                            credentialsId: env.CREDENTIALS_ID
                        )
                        sendMessageToTelegram("Build and push Docker image successfully")
                    } catch (Exception e) {
                        def errorMessage = "Error building or pushing Docker image: ${e.message}"
                        sendMessageToTelegram(errorMessage)
                        throw e
                    }
                }
            }
        }
        stage('Deploy Docker Container') {
            steps {
                script {
                    deployDocker(
                        image: env.IMAGE,
                        registry: env.REGISTRY,
                        tag: env.TAG,
                        containerPort: env.CONTAINER_PORT,
                        hostPort: env.HOST_PORT,
                        containerName: env.CONTAINER_NAME
                    )
                    sendMessageToTelegram("Deploy Docker container successfully")
                }
            }
        }
        stage('Clean Up Docker Images') {
            steps {
                echo "Removing dangling Docker images."
                sh 'docker rmi $(docker images -f "dangling=true" -q) || true'  // Remove dangling images
                sendMessageToTelegram("Remove dangling images successfully")
            }
        }
        stage('Send Enhanced Message') {
            steps {
                script {
                    def message = """
                    ðŸŒŸ *Jenkins Notification* ðŸŒŸ

                    *Project:* ${env.JOB_NAME}
                    *Build Status:* ${currentBuild.currentResult}
                    *Build Number:* ${currentBuild.number}
                    *Build URL:* [Open Build](${env.BUILD_URL})

                    ðŸš€ *Powered by Jenkins* ðŸš€
                    """

                    sendMessageToTelegram(message)
                }
            }
        }
        stage('Clean Up Build Environment') {
            when {
                expression { currentBuild.result != 'SUCCESS' }
            }
            steps {
                script {
                    cleanWs()
                    sh 'docker stop $(docker ps -q) || true'
                    sh 'docker rm $(docker ps -aq) || true'
                    sh 'docker rmi $(docker images -aq) || true'
                }
            }
        }
    }

    post {
        always {
            script {
                cleanWs()
                sh 'docker stop $(docker ps -q) || true'
                sh 'docker rm $(docker ps -aq) || true'
                sh 'docker rmi $(docker images -aq) || true'
            }
        }
    }
}
