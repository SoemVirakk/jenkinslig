@Library(['jenkinslib']) _

pipeline {
    agent any

    environment {

        REGISTRY = 'radomkhoem'
        IMAGE = 'angular-docker'
        TAG = "${BUILD_NUMBER}"
        CREDENTIALS_ID = 'docker-hub'
        GitRepoURL = "https://github.com/roldophe/my-angular-project.git"
        CONTAINER_NAME = "${IMAGE}-${TAG}"
        CONTAINER_PORT = "80"
        HOST_PORT = "3002"
    }
    
    
    stages {
        stage('Git clone') {
            steps {
                echo "Cloning repository from GitHub"
                git branch: 'main', url: env.GitRepoURL
                sh 'ls -lrt'
                sh 'pwd'
            }
        }

        stage('Remove Existing Images') {
            steps {
                echo "Removing existing Docker image."
                sh "docker rmi -f ${IMAGE} || true"
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    buildAndPushDocker(
                        image: env.IMAGE,
                        registry: env.REGISTRY,
                        tag: env.TAG,
                        credentialsId: env.CREDENTIALS_ID
                    )
                }
            }
        }

        stage('Deploy Docker Container') {
            steps {
                script {
                    deployDocker(
                        image: env.IMAGE,
                        registry: env.REGISTRY,
                        tag: env.TAG,
                        containerPort: env.CONTAINER_PORT,
                        hostPort: env.HOST_PORT,
                        containerName: env.CONTAINER_NAME
                    )
                }
            }
        }
        // stage('Deploy') {
        //     steps {
        //         echo "Deploying Docker container."
        //         sh "docker stop ${CONTAINER_NAME} || true"
        //         sh "docker rm ${CONTAINER_NAME} || true"
        //         sh "docker run -d -p ${HOST_PORT}:${CONTAINER_PORT} --name ${env.CONTAINER_NAME} ${IMAGE}"
        //     }
        // }

        stage('Clean Up Docker Images') {
            steps {
                echo "Removing dangling Docker images."
                sh 'docker rmi $(docker images -f "dangling=true" -q) || true'
            }
        }

        stage('Clean workspace') {
            steps {
                cleanWs()
            }
        }
    }
}
