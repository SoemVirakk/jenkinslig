@Library(['jenkinslib']) _

pipeline {
    agent any

    environment {
        chat_id = '6179867909'
        REGISTRY = 'radomkhoem'
        IMAGE = 'angular-docker'
        TAG = "${BUILD_NUMBER}"
        CREDENTIALS_ID = 'docker-hub'
        GitRepoURL = "https://github.com/roldophe/my-angular-project.git"
        CONTAINER_NAME = "${IMAGE}-${TAG}"
        CONTAINER_PORT = "80"
        HOST_PORT = "3002"
    }
    
    
    stages {
        stage('Git clone') {
            steps {
                echo "Cloning repository from GitHub"
                git branch: 'main', url: env.GitRepoURL
                sh 'ls -lrt'
                sh 'pwd'
            }
        }

        stage('Remove Existing Images') {
            steps {
                echo "Removing existing Docker image."
                sh "docker rmi -f ${IMAGE} || true"
            }
        }
        
        
        stage('Check and Remove Running Container') {
            steps {
                script {
                    // Check if a container is running on the specified container port
                    def runningContainerId = sh(script: "docker ps -qf expose=${CONTAINER_PORT}", returnStdout: true).trim()

                    if (runningContainerId) {
                        echo "Stopping and removing the existing container."
                        sh "docker stop ${runningContainerId}"
                        sh "docker rm ${runningContainerId}"
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    buildAndPushDocker(
                        image: env.IMAGE,
                        registry: env.REGISTRY,
                        tag: env.TAG,
                        credentialsId: env.CREDENTIALS_ID
                    )
                }
            }
        }
        
        stage('Deploy Docker Container') {
            steps {
                script {
                    deployDocker(
                        image: env.IMAGE,
                        registry: env.REGISTRY,
                        tag: env.TAG,
                        containerPort: env.CONTAINER_PORT,
                        hostPort: env.HOST_PORT,
                        containerName: env.CONTAINER_NAME
                    )
                }
            }
        }

        stage('Remove Deployed Image') {
            steps {
                script {
                    sh "docker rmi ${env.REGISTRY}/${env.IMAGE}:${env.TAG} || true"
                }
            }
        }

        stage('Clean workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Send Enhanced Message') {
            steps {
                script {
                    // Define the template message with placeholders
                    def messageTemplate = '''
                    ðŸŒŸ *Jenkins Notification* ðŸŒŸ

                    *Project:* ${projectName}
                    *Build Status:* ${buildStatus}
                    *Build Number:* ${buildNumber}
                    *Build URL:* [Open Build](${buildUrl})

                    ðŸš€ *Powered by Jenkins* ðŸš€
                    '''
                    
                    // Replace placeholders with actual values
                    def message = messageTemplate.replace('${projectName}', env.JOB_NAME)
                                                .replace('${buildStatus}', currentBuild.currentResult)
                                                .replace('${buildNumber}', currentBuild.number.toString())
                                                .replace('${buildUrl}', env.BUILD_URL)
                    
                    // Define the URL for the API request with BotToken from Jenkins environment
                    def url = "https://api.telegram.org/bot${env.BotToken}/sendMessage"
                    
                    // Send the message using curl with Markdown parse mode
                    sh "curl -s -X POST '${url}' -d chat_id=${chat_id} -d text='${message}' -d parse_mode=Markdown"
                }
            }
        }
    }
}
